import pandas as pd
from sqlalchemy import create_engine

# Create connection to your database
engine = create_engine('sqlite:///financial_data.db')  # Example using SQLite; replace with your actual database

# Load necessary tables into DataFrames
pcp_df = pd.read_sql("SELECT * FROM SF_FNRPT_ODS_PCP_GL_FEED WHERE EFFYR = {currentYear} AND EFFMTH = {currentMonth}", engine)
acct_df = pd.read_sql("SELECT * FROM REF_PCP_ACCOUNT_REF", engine)
dist_df = pd.read_sql("SELECT * FROM REF_PCP_DISTRIB_REF", engine)
lob_df = pd.read_sql("SELECT * FROM REF_PCP_LOB_REF", engine)
stat_df = pd.read_sql("SELECT * FROM REF_PCP_State_REF", engine)

# Define transformation functions
def line_func(row):
    if row['MLOB'] == '0771' and row['PRODUCT'] == 'HO':
        return 'Dwelling'
    elif row['MLOB'] == '0771' and row['PRODUCT'] == '0CD':
        return 'Condo'
    elif row['MLOB'] == '0771' and row['PRODUCT'] == '0DW':
        return 'Dwelling'
    elif row['MLOB'] == '0771' and row['PRODUCT'] == '0TE':
        return 'Renter'
    elif row['MLOB'] == '0771' and row['PRODUCT'] not in ['HO', '0CD', '0DW', '0TE']:
        return 'Dwelling'
    elif row['MLOB'] == '0310' and row['PRODUCT'] == 'PU':
        return 'Umbrella'
    else:
        return row['LOB_ALIAS']

def dist_func(row):
    if "Invol" in row['Code']:
        return 'Involuntary'
    else:
        return 'Voluntary'

def distribution_func(row):
    if row['Code'] == ' ':
        return 'Distribution N/A'
    elif row['Code'] == '0230':
        return 'Certainly Auto'
    else:
        return row['USGL']

def brand_func(row):
    if row['Code'] == ' ':
        return 'Liberty'
    else:
        return row['Brand']

# Apply transformations to DataFrame
pcp_df['Line'] = pcp_df.apply(line_func, axis=1)
pcp_df['Vol_Invol'] = pcp_df.apply(dist_func, axis=1)
pcp_df['Distribution'] = pcp_df.apply(distribution_func, axis=1)
pcp_df['Brand'] = pcp_df.apply(brand_func, axis=1)

# Define columns for aggregation
agg_columns = ['Other Revenue', 'Net Investment Income', 'Billing Fees', 'Non-Traditional Revenue', 
               'Premium and Other Taxes', 'Charge-offs', 'Goodwill Amortization', 'Misc Income', 
               'Change Loss IBNR Rsv CY CAT', 'Change Loss IBNR Rsv PY CAT', 'Change Loss IBNR Rsv CY NonCAT', 
               'Change Loss IBNR Rsv PY NonCAT', 'Change ALAE IBNR Rsv CY CAT', 'Change ALAE IBNR Rsv PY CAT', 
               'Change ALAE IBNR Rsv CY NonCAT', 'Change ALAE IBNR Rsv PY NonCAT', 'ULAE Paid Expenses', 
               'Changes in ULAE Res', 'Amortization of DAC', 'Capitalization of DAC', 'Administrative Expense Paid', 
               'Chg in Admin Expense Reserve', 'Commissions Paid', 'Chg Commissions Reserve', 'Other Acq. Exp. Paid', 
               'Other Acq. Exp. Chg Reserve']

# Aggregate data using groupby and sum
agg_pcp_df = pcp_df.groupby(['BookDate', 'Reinsurance', 'State', 'Product', 'Line', 'GL_LOB', 'PRE_ALLOC_LOB', 
                             'Vol_Invol', 'Distribution', 'Brand'], as_index=False)[agg_columns].sum()

# Pivot the data to transform rows into columns
pcp_transpose = agg_pcp_df.melt(id_vars=['BookDate', 'Reinsurance', 'State', 'Product', 'Line', 'GL_LOB', 
                                         'PRE_ALLOC_LOB', 'Vol_Invol', 'Distribution', 'Brand'],
                                value_vars=agg_columns, var_name='Account', value_name='Amount')

# Filter out rows where Amount is zero
pcp_final_df = pcp_transpose[pcp_transpose['Amount'] != 0]

# Save final data to SQL
pcp_final_df.to_sql('pcp_final', engine, if_exists='replace', index=False)

# Or save to CSV
pcp_final_df.to_csv('pcp_final.csv', index=False)
