import pandas as pd
import sharepy

# Step 1: Authenticate with SharePoint (example with sharepy library)
s = sharepy.connect("https://libertymutual.sharepoint.com/sites/GRMFSDataStrategy", username="your_username", password="your_password")

# Step 2: Get the SharePoint files (assuming you already have access to them)
files = s.get("/sites/GRMFSDataStrategy/Shared Documents/USRM Versions PL TL/")  # Modify the file path as needed

# Step 3: Load the data (Assuming files are CSV or Excel files)
# Example of reading CSV files from SharePoint - update this as per your file type and path
file_url = "path_to_your_file"
df = pd.read_csv(file_url)

# Step 4: Filter out hidden files (assuming you have metadata to indicate if hidden)
df_filtered = df[df['Attributes'] != 'hidden']  # Example filter (you may need to adjust based on actual data)

# Step 5: Add transformed data (custom function replacement)
# Assuming your transformation is a custom function, replicate it here
def transform_file(file_content):
    # Implement your custom transformation logic here
    return file_content

df_filtered['TransformedData'] = df_filtered['Content'].apply(transform_file)

# Step 6: Rename columns
df_filtered = df_filtered.rename(columns={"Name": "Source.Name"})

# Step 7: Select necessary columns
df_filtered = df_filtered[['Source.Name', 'TransformedData']]

# Step 8: Expand the "TransformedData" column (assuming it's a nested table, list, or json)
df_expanded = pd.json_normalize(df_filtered['TransformedData'])

# Step 9: Change data types of specific columns
df_expanded['Source.Name'] = df_expanded['Source.Name'].astype(str)
df_expanded['Line Item'] = df_expanded['Line Item'].astype(str)
df_expanded['Value'] = df_expanded['Value'].astype(float)

# Step 10: Add a version column
df_expanded['Version'] = df_expanded['Source.Name'].str[40:44]

# Step 11: Remove the 'Source.Name' column
df_expanded = df_expanded.drop(columns=['Source.Name'])

# Step 12: Rename columns again
df_expanded = df_expanded.rename(columns={
    "LOB": "Line", 
    "Channel Hierarchy": "Channel", 
    "State": "States", 
    "Value": "Amount", 
    "Segment: PL": "Segment", 
    "Period": "Book Date"
})

# Step 13: Trim whitespace from "Line Item" column
df_expanded['Line Item'] = df_expanded['Line Item'].str.strip()

# Step 14: Replace specific values in "Line Item"
df_expanded['Line Item'] = df_expanded['Line Item'].replace({
    "DAC Amortization - Accounts": "DAC Amortization",
    "DAC Capitalization - Accounts": "DAC Capitalization"
})

# Step 15: Add additional columns based on conditions
df_expanded['State'] = df_expanded['States'].apply(lambda x: "State NA" if x == "State NA" or x == "" else x[:2])
df_expanded['Distribution'] = df_expanded.apply(lambda row: "LM Platform" if row['Brand Hierarchy'] == "LM" and row['Channel'] == "Platform"
                                               else f"{row['Segment']}-{row['Brand Hierarchy']}{row['Channel']}" if row['Segment'] != "" 
                                               else row['Channel'], axis=1)

df_expanded['Account'] = df_expanded.apply(lambda row: f"{row['Line Item']} - {row['DAC Accounts']}" if row['DAC Accounts'] != "" 
                                           else row['Line Item'], axis=1)

# Step 16: Add a "Reinsurance" column based on conditions
def reinsurance(row):
    if row['RI Code'] == "" and (row['Account'] == "DAC Amortization" or row['Account'] == "DAC Capitalization"):
        return "GP"
    elif row['RI Code'] == "RI Direct":
        return "Direct"
    elif row['Account'] == "RI-Non CUNA Earned Premium - Assumed":
        return "Assumed"
    elif row['Account'] == "RI-Non CUNA Earned Premium - Ceded":
        return "Ceded"
    elif row['RI Code'] != "":
        return row['RI Code']
    else:
        return "Direct"

df_expanded['Reinsurance'] = df_expanded.apply(reinsurance, axis=1)

# Step 17: Remove unnecessary columns
df_expanded = df_expanded.drop(columns=['Brand Hierarchy', 'Line Item', 'RI Code', 'DAC Accounts', 'States'])

# Step 18: Replace specific values in columns
df_expanded['Segment'] = df_expanded['Segment'].replace("", "PL Segment")
df_expanded['Distribution'] = df_expanded['Distribution'].replace("IA (Vol) State Auto", "PL Segment-IA (Vol) State Auto")

# Final output
print(df_expanded)
