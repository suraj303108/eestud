1. What is the difference between deepcopy and shallow copy in Python?
Answer:

Shallow copy: A shallow copy creates a new object, but it doesn't create copies of nested objects. Instead, it just references the original objects inside the copied object. For example, if the original list has a nested list, both the original and copied lists will refer to the same nested list.
Example: list1 = [1, [2, 3]], list2 = list1.copy()
Any change to the nested list in list2 will also affect list1.
Deep copy: A deep copy creates a new object and recursively copies all objects found in the original. This means that changes to any nested objects in the copied object will not affect the original.
Example: import copy
list1 = [1, [2, 3]], list2 = copy.deepcopy(list1)
Modifications in list2's nested list won't affect list1.
