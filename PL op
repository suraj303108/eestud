import pandas as pd
import sharepy

# Step 1: Authenticate with SharePoint (example with sharepy library)
s = sharepy.connect("https://libertymutual.sharepoint.com/sites/GRMFSDataStrategy", username="your_username", password="your_password")

# Step 2: Get the SharePoint files (assuming you already have access to them)
# Modify the file path and the endpoint accordingly
files = s.get("/sites/GRMFSDataStrategy/Shared Documents/USRM Versions PL OP/")  # Adjust path as needed

# Step 3: Load the data (assuming files are CSV or Excel files)
# Example of reading CSV files from SharePoint - update this as per your file type and path
file_url = "path_to_your_file"
df = pd.read_csv(file_url)

# Step 4: Filter out hidden files (assuming metadata is available to indicate if hidden)
df_filtered = df[df['Attributes'] != 'hidden']  # Replace 'hidden' with the actual indicator if needed

# Step 5: Apply a transformation function (custom function)
# Assuming your transformation function is applied to the 'Content' column (example here)
def transform_file(content):
    # Your transformation logic here
    return content  # Adjust logic based on your actual custom function

df_filtered['TransformedData'] = df_filtered['Content'].apply(transform_file)

# Step 6: Rename columns (as per your transformation steps)
df_filtered = df_filtered.rename(columns={"Name": "Source.Name"})

# Step 7: Select necessary columns
df_filtered = df_filtered[['Source.Name', 'TransformedData']]

# Step 8: Expand the "TransformedData" column (assuming it's a nested structure like JSON or a table)
df_expanded = pd.json_normalize(df_filtered['TransformedData'])  # Adjust this if your data structure is different

# Step 9: Change data types of columns
df_expanded['Source.Name'] = df_expanded['Source.Name'].astype(str)
df_expanded['Line Item'] = df_expanded['Line Item'].astype(str)
df_expanded['Brand'] = df_expanded['Brand'].astype(str)
df_expanded['Channel'] = df_expanded['Channel'].astype(str)
df_expanded['SS_States: US States'] = df_expanded['SS_States: US States'].astype(str)
df_expanded['SS_LOB: Export Metric'] = df_expanded['SS_LOB: Export Metric'].astype(str)
df_expanded['Period'] = pd.to_datetime(df_expanded['Period'])
df_expanded['Value'] = df_expanded['Value'].astype(float)

# Step 10: Add "Version" column
df_expanded['Version'] = df_expanded['Source.Name'].str[44:48]

# Step 11: Remove the 'Source.Name' column
df_expanded = df_expanded.drop(columns=['Source.Name'])

# Step 12: Replace "State N/A" with "State NA"
df_expanded['SS_States: US States'] = df_expanded['SS_States: US States'].replace("State N/A", "State NA")

# Step 13: Add "State" column based on conditions
df_expanded['State'] = df_expanded['SS_States: US States'].apply(lambda x: "State NA" if x == "State NA" or x == "" else x[:2])

# Step 14: Add "Distribution" column based on conditions
df_expanded['Distribution'] = df_expanded.apply(lambda row: "LM Platform" if row['Brand'] == "LM" and row['Channel'] == "Platform" 
                                               else row['Channel'], axis=1)

# Step 15: Add "Reinsurance" column (with "Direct" as default value)
df_expanded['Reinsurance'] = "Direct"

# Step 16: Add "Segment" column with default value "PL Segment"
df_expanded['Segment'] = "PL Segment"

# Step 17: Rename columns
df_expanded = df_expanded.rename(columns={"SS_LOB: Export Metric": "Line", "Line Item": "Account"})

# Step 18: Remove unnecessary columns ("Brand" and "SS_States: US States")
df_expanded = df_expanded.drop(columns=['Brand', 'SS_States: US States'])

# Step 19: Change the data types of some columns
df_expanded['State'] = df_expanded['State'].astype(str)
df_expanded['Amount'] = df_expanded['Value']  # Renaming 'Value' to 'Amount'
df_expanded['Book Date'] = pd.to_datetime(df_expanded['Period'])

# Step 20: Final column renaming
df_expanded = df_expanded.rename(columns={"Value": "Amount", "Period": "Book Date"})

# Final output
print(df_expanded)
